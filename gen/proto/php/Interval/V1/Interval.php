<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: interval/v1/interval.proto

namespace Interval\V1;

use UnexpectedValueException;

/**
 * Protobuf type <code>interval.v1.Interval</code>
 */
class Interval
{
    /**
     * Generated from protobuf enum <code>INTERVAL_UNSPECIFIED = 0;</code>
     */
    const INTERVAL_UNSPECIFIED = 0;
    /**
     * Generated from protobuf enum <code>INTERVAL_YEAR = 1;</code>
     */
    const INTERVAL_YEAR = 1;
    /**
     * Generated from protobuf enum <code>INTERVAL_HALF_YEAR = 2;</code>
     */
    const INTERVAL_HALF_YEAR = 2;
    /**
     * Generated from protobuf enum <code>INTERVAL_QUARTER = 3;</code>
     */
    const INTERVAL_QUARTER = 3;
    /**
     * Generated from protobuf enum <code>INTERVAL_MONTH = 4;</code>
     */
    const INTERVAL_MONTH = 4;

    private static $valueToName = [
        self::INTERVAL_UNSPECIFIED => 'INTERVAL_UNSPECIFIED',
        self::INTERVAL_YEAR => 'INTERVAL_YEAR',
        self::INTERVAL_HALF_YEAR => 'INTERVAL_HALF_YEAR',
        self::INTERVAL_QUARTER => 'INTERVAL_QUARTER',
        self::INTERVAL_MONTH => 'INTERVAL_MONTH',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

