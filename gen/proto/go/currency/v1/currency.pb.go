// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: currency/v1/currency.proto

package currencyv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Currency int32

const (
	Currency_CURRENCY_UNSPECIFIED Currency = 0
	Currency_CURRENCY_EUR         Currency = 1
	Currency_CURRENCY_USD         Currency = 2
	Currency_CURRENCY_GBP         Currency = 3
	Currency_CURRENCY_SEK         Currency = 4
	Currency_CURRENCY_NOK         Currency = 5
	Currency_CURRENCY_CNY         Currency = 6
	Currency_CURRENCY_YEN         Currency = 7
	Currency_CURRENCY_JPY         Currency = 8
	Currency_CURRENCY_KRW         Currency = 9
	Currency_CURRENCY_ILS         Currency = 10
	Currency_CURRENCY_ZAR         Currency = 11
	Currency_CURRENCY_CHF         Currency = 12
	Currency_CURRENCY_INR         Currency = 13
	Currency_CURRENCY_MYR         Currency = 14
	Currency_CURRENCY_DKK         Currency = 15
	Currency_CURRENCY_AED         Currency = 16
	Currency_CURRENCY_SGD         Currency = 17
	Currency_CURRENCY_KES         Currency = 18
	Currency_CURRENCY_TRY         Currency = 19
	Currency_CURRENCY_IDR         Currency = 20
	Currency_CURRENCY_PLN         Currency = 21
	Currency_CURRENCY_ISK         Currency = 22
	Currency_CURRENCY_HKD         Currency = 23
	Currency_CURRENCY_PEN         Currency = 24
	Currency_CURRENCY_BRL         Currency = 25
	Currency_CURRENCY_RUB         Currency = 26
	Currency_CURRENCY_CAD         Currency = 27
	Currency_CURRENCY_OMR         Currency = 28
	Currency_CURRENCY_THB         Currency = 29
	Currency_CURRENCY_PHP         Currency = 30
	Currency_CURRENCY_COP         Currency = 31
	Currency_CURRENCY_XOF         Currency = 32
	Currency_CURRENCY_ARS         Currency = 33
	Currency_CURRENCY_NZD         Currency = 34
	Currency_CURRENCY_AUD         Currency = 35
	Currency_CURRENCY_TWD         Currency = 36
)

// Enum value maps for Currency.
var (
	Currency_name = map[int32]string{
		0:  "CURRENCY_UNSPECIFIED",
		1:  "CURRENCY_EUR",
		2:  "CURRENCY_USD",
		3:  "CURRENCY_GBP",
		4:  "CURRENCY_SEK",
		5:  "CURRENCY_NOK",
		6:  "CURRENCY_CNY",
		7:  "CURRENCY_YEN",
		8:  "CURRENCY_JPY",
		9:  "CURRENCY_KRW",
		10: "CURRENCY_ILS",
		11: "CURRENCY_ZAR",
		12: "CURRENCY_CHF",
		13: "CURRENCY_INR",
		14: "CURRENCY_MYR",
		15: "CURRENCY_DKK",
		16: "CURRENCY_AED",
		17: "CURRENCY_SGD",
		18: "CURRENCY_KES",
		19: "CURRENCY_TRY",
		20: "CURRENCY_IDR",
		21: "CURRENCY_PLN",
		22: "CURRENCY_ISK",
		23: "CURRENCY_HKD",
		24: "CURRENCY_PEN",
		25: "CURRENCY_BRL",
		26: "CURRENCY_RUB",
		27: "CURRENCY_CAD",
		28: "CURRENCY_OMR",
		29: "CURRENCY_THB",
		30: "CURRENCY_PHP",
		31: "CURRENCY_COP",
		32: "CURRENCY_XOF",
		33: "CURRENCY_ARS",
		34: "CURRENCY_NZD",
		35: "CURRENCY_AUD",
		36: "CURRENCY_TWD",
	}
	Currency_value = map[string]int32{
		"CURRENCY_UNSPECIFIED": 0,
		"CURRENCY_EUR":         1,
		"CURRENCY_USD":         2,
		"CURRENCY_GBP":         3,
		"CURRENCY_SEK":         4,
		"CURRENCY_NOK":         5,
		"CURRENCY_CNY":         6,
		"CURRENCY_YEN":         7,
		"CURRENCY_JPY":         8,
		"CURRENCY_KRW":         9,
		"CURRENCY_ILS":         10,
		"CURRENCY_ZAR":         11,
		"CURRENCY_CHF":         12,
		"CURRENCY_INR":         13,
		"CURRENCY_MYR":         14,
		"CURRENCY_DKK":         15,
		"CURRENCY_AED":         16,
		"CURRENCY_SGD":         17,
		"CURRENCY_KES":         18,
		"CURRENCY_TRY":         19,
		"CURRENCY_IDR":         20,
		"CURRENCY_PLN":         21,
		"CURRENCY_ISK":         22,
		"CURRENCY_HKD":         23,
		"CURRENCY_PEN":         24,
		"CURRENCY_BRL":         25,
		"CURRENCY_RUB":         26,
		"CURRENCY_CAD":         27,
		"CURRENCY_OMR":         28,
		"CURRENCY_THB":         29,
		"CURRENCY_PHP":         30,
		"CURRENCY_COP":         31,
		"CURRENCY_XOF":         32,
		"CURRENCY_ARS":         33,
		"CURRENCY_NZD":         34,
		"CURRENCY_AUD":         35,
		"CURRENCY_TWD":         36,
	}
)

func (x Currency) Enum() *Currency {
	p := new(Currency)
	*p = x
	return p
}

func (x Currency) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Currency) Descriptor() protoreflect.EnumDescriptor {
	return file_currency_v1_currency_proto_enumTypes[0].Descriptor()
}

func (Currency) Type() protoreflect.EnumType {
	return &file_currency_v1_currency_proto_enumTypes[0]
}

func (x Currency) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Currency.Descriptor instead.
func (Currency) EnumDescriptor() ([]byte, []int) {
	return file_currency_v1_currency_proto_rawDescGZIP(), []int{0}
}

var File_currency_v1_currency_proto protoreflect.FileDescriptor

var file_currency_v1_currency_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2a, 0xac, 0x05, 0x0a, 0x08, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x45, 0x55, 0x52,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x55,
	0x53, 0x44, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x47, 0x42, 0x50, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x53, 0x45, 0x4b, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4e, 0x4f, 0x4b, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x4e, 0x59, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x59, 0x45, 0x4e, 0x10, 0x07, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4a, 0x50, 0x59, 0x10, 0x08,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4b, 0x52, 0x57,
	0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x49,
	0x4c, 0x53, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x5a, 0x41, 0x52, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x43, 0x48, 0x46, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x49, 0x4e, 0x52, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4d, 0x59, 0x52, 0x10, 0x0e, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x44, 0x4b, 0x4b, 0x10, 0x0f, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x41, 0x45, 0x44, 0x10, 0x10,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x53, 0x47, 0x44,
	0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4b,
	0x45, 0x53, 0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x54, 0x52, 0x59, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x49, 0x44, 0x52, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x50, 0x4c, 0x4e, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x49, 0x53, 0x4b, 0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x48, 0x4b, 0x44, 0x10, 0x17, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x50, 0x45, 0x4e, 0x10, 0x18,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x42, 0x52, 0x4c,
	0x10, 0x19, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x52,
	0x55, 0x42, 0x10, 0x1a, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x43, 0x41, 0x44, 0x10, 0x1b, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x4f, 0x4d, 0x52, 0x10, 0x1c, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x54, 0x48, 0x42, 0x10, 0x1d, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55,
	0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x50, 0x48, 0x50, 0x10, 0x1e, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x4f, 0x50, 0x10, 0x1f, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x58, 0x4f, 0x46, 0x10, 0x20,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x41, 0x52, 0x53,
	0x10, 0x21, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x4e,
	0x5a, 0x44, 0x10, 0x22, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x43, 0x59,
	0x5f, 0x41, 0x55, 0x44, 0x10, 0x23, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x54, 0x57, 0x44, 0x10, 0x24, 0x42, 0xb7, 0x01, 0x0a, 0x0f, 0x63, 0x6f, 0x6d,
	0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x48, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x75, 0x69, 0x66, 0x72, 0x6f,
	0x64, 0x72, 0x69, 0x67, 0x75, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x75, 0x74,
	0x69, 0x6c, 0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f,
	0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x0b,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0b, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x17, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x3a, 0x3a,
	0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_currency_v1_currency_proto_rawDescOnce sync.Once
	file_currency_v1_currency_proto_rawDescData = file_currency_v1_currency_proto_rawDesc
)

func file_currency_v1_currency_proto_rawDescGZIP() []byte {
	file_currency_v1_currency_proto_rawDescOnce.Do(func() {
		file_currency_v1_currency_proto_rawDescData = protoimpl.X.CompressGZIP(file_currency_v1_currency_proto_rawDescData)
	})
	return file_currency_v1_currency_proto_rawDescData
}

var file_currency_v1_currency_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_currency_v1_currency_proto_goTypes = []interface{}{
	(Currency)(0), // 0: currency.v1.Currency
}
var file_currency_v1_currency_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_currency_v1_currency_proto_init() }
func file_currency_v1_currency_proto_init() {
	if File_currency_v1_currency_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_currency_v1_currency_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_currency_v1_currency_proto_goTypes,
		DependencyIndexes: file_currency_v1_currency_proto_depIdxs,
		EnumInfos:         file_currency_v1_currency_proto_enumTypes,
	}.Build()
	File_currency_v1_currency_proto = out.File
	file_currency_v1_currency_proto_rawDesc = nil
	file_currency_v1_currency_proto_goTypes = nil
	file_currency_v1_currency_proto_depIdxs = nil
}
